
last, <snapshot>, current

html (html-head (css (tingeer/github))) (body ) #fail on html (head )

cd google
ls threads | sort --date | head | cat
cd ..
ls
--save--

curl
google freekh@<tab> {mail, drive, search} {ls, search} |
install (google/freekh@gmail google/fredrik@tingeer.com) mail
cat google
edit google (open https://tsitc.com/tsitc/google)
github/{id, auth}/freekh/{repos, ls, }
env { oauth: {google: { key: 123, secret: 456 } } }
install google freekh@gmail.com ((ln (which /google/current) ~/google) auth freekh@gmail.com ~/google/freekh@gmail.com)
cd google
google auth freekh@gmail.com #(read 'password')
| share #share results, publish script

respond (webhook) , curl, open, lns, read, js



||


listen ~/bar > (keys google)


(request https://test) & (listen ~/bar > (keys google))

request https://test & listen ~/bar > (keys google)
eval 1 + 1 //2

eval "1 + 1 + 1" //3

echo 'fredrik' | ~/test

(eval "(name) => `hello ${name}`") fredrik

"(name) => `hello ${name}`" | publish ~/test
test 'fredrik' // hello fredrik

publish ("(name) => 'hello' + world")

https://tsitc.com/freekh/test

eval (using (request https://.../browserify/raw) browserify) > ~/browserify
publish ~/browserify //https://tsitc/freekh/browserify


[request a, request b] | browserify > ~/foo


html (head (script (url ~/test))) (body (div.Faen { test: ''} [ ]))
ln (html (body ~/test)) ~/
publish (ln ($?) ~/public/(hash $?) ) // random output

~/google/drive Example.js > ~/docs/important //~/docs/important/123cabc

ln ~/google/drive Example.js ~/docs/important

snapshot ~/docs/important ~/docs/important/1 ( cat (which ~/docs/important) > ~/docs/important/1 )

~/docs/important





link
permissions grant ~/

read "Get password"



----


command: path expression*
expression: ".*?" | '.*?' | expression
expression: (expression)
(a b): (a (b))
a b: (a b)

expressions returns results. Results are typed: text, json, html, blob, image for beta. Sets the mime-type. It is possible to create types in the future.



google/freekh@gmail/mail | versioned ~/mail (store one) OR google/freekh@gmail.com/mail > ~/mail
  VS
ln google/freekh@gmail.com/mail mail i.e. (ln ~/google/freekh@gmail/mail ~/mail)
ln google/mail google/*/mail (expands to: ln google/ls (google/freekh@gmail.com google/fredrik@tingeer.com) )


tsitc/freekh/mail (requires login)
tsitc/freekh/public/something (no login, ~/public is readable by all, writable by user, not by team)

https://tsitc.com/tingeer/issues (requires login)

it is possible to navigate from:
 tsitc/freekh (~ for freekh)
to:
 tsitc/tingeer (tingeer is a team where freekh is a user)

- User input is possible
- Oauth should be possible to implement

Every expression is built with a progress indicator. Progress is aggregated from the different expressions that are run.
The theme defines how results are processed. There is a default one, one for the command prompt, ...

User input example:
read {one: "Please enter one"} {two: "Enter two"} | /tsitc/ln $one $two

Auto-indent & preview (only available for html)
html (
  (h 'h1' {style: { color: black }} "Users")
  (h 'ul.Users' (
      ~/heroku/fredrik@tingeer.com/psql "select * from users" | tail | $.username
    )
  )
) (style { 'Users': { 'margin-left': '20px' } }) > /tingeer/users

ln heroku/freekh@gmail.com/postgres postgres/heroku-freekh@gmail.com

cd postgres/heroku-freekh@gmail.com
ln (psql "select * from users") ~/pub/users (when https://tsitc.com/freekh/pub/users is hit it redirects: (psql "select * from users")) which executes (eval /tsitc/extras/psql "select * from users" (/tsitc/extras/account ) )
psql "select * from users" | versioned ~/pub/users (when https://tsitc.com/freekh/pub/users is hit, it links to https://tsitc.com/freekh/pub/users/head, which links to https://tsitc.com/freekh/pub/users/versions/a1b4a2f31ab which executes (json ["name", "email", "date"] [{"fredrik", "f@gmail.com", "2016-01-10 13:13:00000Z"}]), which returns [[]])

it is possible to do: ~/ls google/freekh@gmail.com which returns which root expressions are available in that folder/context (json [{type: 'app', name: 'mail', 'path': '~/google/freekh@gmail.com/mail'}])


How should accounts be handled? Is it possible to do it without cheating (i.e. having something like env?)

Most expressions ends up as a r to some web service.

html (
  h 'ul' (~/google/freekh@gmail.com/drive/Spreadsheet.sheet | $('csv').source | request | csv-json | $['Account names'])
)
gsheet-json ~/google/freekh@gmail.com/drive/Spreadsheet.sheet

bind (
  as name (~/google/freekh@gmail.com/drive/Spreadsheet.sheet | $('gsheet').source | google/drive/sheet/range 
  as email (~/heroku/freekh@gmail.com/psql "select * from users where name = $.name")
  filter (not-null $.email)
) | match (regex ".*@gmail.com") | json $.name $.email > /tingeer/users/mail


webhook |   > ~/




Det man kan gjøre med dette:
- https://tsitc.com/freekh/mail?page=0&count=50&sort=recent&threads=yes gir meg all min aggregerte mail
- https://tsitc.com/tingeer/issues gir en html side som bruker https://tsitc.com/tingeer/issues/ls
- issues er et expression som basert på en array av issues gir en side. Man kan bytte ut
- man kan enkelt lage team sites basert på aggregert data.
- man kan lage charts basert på en rekke forskjellige kilder fra rest ganske enkelt - uten å måtte gjøre noe på
- man kan enkelt transformere data
- relativt avanserte måter å trekke ut data på
