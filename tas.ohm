TAS {
  Cmd (a valid top-level expression)
                  = NonemptyListOf<Expr, "\n"> -- Exprs
  Term            = "|" | lineTerminator

  Expr (a valid expression) 
                  = (CmdExpr | Val)
  FunExpr         = "?" Subscript*
  CtxExpr         = "$" Subscript*
  Subscript       = ArraySubscript | PropSubScript
  ArraySubscript  = "[" Int "]"
  PropSubScript   = "." Key
  ArgExpr         = FunExpr | CmdExpr
  CmdId           = letter alnum*
  CmdExpr         = CmdId (whitespace* (FunExpr))*
  Val             = (
                    Int
                  | ArrayLiteral
                  )
  ArrayLiteral    = "[" (Val ("," Val)* ","?)? "]"
  Int             = "+" decimalDigit* -- positive
                  | "-" decimalDigit* -- negative
                  |     decimalDigit+ -- noSign
  ObjLiteral      = "{" (ObjPair ("," ObjPair)* ","?)? "}"
  ObjPair         = spaces (Key ":" Val) spaces
  Key             = KeyPath
  KeyPath         = spaces (letter alnum*) spaces


  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
  zeroToThree = "0".."3"
  fourToSeven = "4".."7"
  whitespace = "\t"
             | "\x0B"    -- verticalTab
             | "\x0C"    -- formFeed
             | " "
             | "\u00A0"  -- noBreakSpace
             | "\uFEFF"  -- byteOrderMark
             | unicodeSpaceSeparator
  doubleStringCharacter = ~("\"" | "\\" | lineTerminator) sourceCharacter -- nonEscaped
                      | "\\" escapeSequence                             -- escaped
                      | lineContinuation                                -- lineContinuation
  singleStringCharacter = ~("'" | "\\" | lineTerminator) sourceCharacter -- nonEscaped
                      | "\\" escapeSequence                            -- escaped
                      | lineContinuation                               -- lineContinuation
  sourceCharacter = any
  lineContinuation = "\\" lineTerminatorSequence
    escapeSequence = unicodeEscapeSequence
                | hexEscapeSequence
                | octalEscapeSequence
                | characterEscapeSequence  // Must come last.
  characterEscapeSequence = singleEscapeCharacter
                          | nonEscapeCharacter
  singleEscapeCharacter = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v"
  nonEscapeCharacter = ~(escapeCharacter | lineTerminator) sourceCharacter
  escapeCharacter = singleEscapeCharacter | decimalDigit | "x" | "u"
  octalEscapeSequence = zeroToThree octalDigit octalDigit    -- whole
                      | fourToSeven octalDigit               -- eightTimesfourToSeven
                      | zeroToThree octalDigit ~decimalDigit -- eightTimesZeroToThree
                      | octalDigit ~decimalDigit             -- octal
  hexEscapeSequence = "x" hexDigit hexDigit
  unicodeEscapeSequence = "u" hexDigit hexDigit hexDigit hexDigit

  octalDigit = "0".."7"
  decimalDigit = "0".."9"
  nonZeroDigit = "1".."9"
  lineTerminatorSequence = "\n" | "\r" ~"\n" | "\u2028" | "\u2029" | "\r\n"
  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
}